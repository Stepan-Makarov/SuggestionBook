@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData
@rendermode InteractiveServer

<h3>SampleData</h3>
@if (categoriesCreated)
{
    <p>Categories have been created</p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}
@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-dark" @onclick="GenerateSampleMongoData">Cereate Sample Data</button>

@code {
    bool categoriesCreated = false;
    bool statusesCreated = false;

    private async Task GenerateSampleMongoData()
    {
        UserModel user = new UserModel
        {
            FirstName = "Sample",
            LastName = "Data",
            EmailAddress = "SampleData@mail.ru",
            DisplayName = "Sample Data",
            ObjectIdentifier = "123-abc"
        };
        await userData.CreateUser(user);

        var findUser = await userData.GetUserByAuthId(user.ObjectIdentifier);
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new SuggestionModel
        {
            Author = new UserSubModel(findUser),
            Category = categories[0],
            Title = "Our first suggestion",
            Description = "Suggestion generated by Generate Sample Data method",
            ApprovedForRelease = true
        };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new SuggestionModel
        {
            Author = new UserSubModel(findUser),
            Category = categories[1],
            Status = statuses[0],
            Title = "Our second suggestion",
            Description = "Suggestion generated by Generate Sample Data method",
            OwnerNotes = "This is our note for status",
            ApprovedForRelease = true
        };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new SuggestionModel
        {
            Author = new UserSubModel(findUser),
            Category = categories[2],
            Status = statuses[1],
            Title = "Our third suggestion",
            Description = "Suggestion generated by Generate Sample Data method",
            OwnerNotes = "This is our note for status",
            ApprovedForRelease = true
        };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new SuggestionModel
        {
            Author = new UserSubModel(findUser),
            Category = categories[3],
            Status = statuses[2],
            UserVotes = votes,
            Title = "Our fourth suggestion",
            Description = "Suggestion generated by Generate Sample Data method",
            OwnerNotes = "This is our note for status",
            ApprovedForRelease = true
        };
        await suggestionData.CreateSuggestion(suggestion);

        votes.Add("4");

        suggestion = new SuggestionModel
        {
            Author = new UserSubModel(findUser),
            Category = categories[1],
            Status = statuses[3],
            UserVotes = votes,
            Title = "Our fifth suggestion",
            Description = "Suggestion generated by Generate Sample Data method",
            OwnerNotes = "This is our note for status",
            ApprovedForRelease = true
        };
        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new CategoryModel
        {
            CategoryName = "Предложение",
            CategoryDescription = "Ваше предложение чтобы улучшить наш товар"
        };
        await categoryData.CreateCategory(cat);

        cat = new CategoryModel
        {
            CategoryName = "Жалоба",
            CategoryDescription = "Ваша жалоба на наш товар"
        };
        await categoryData.CreateCategory(cat);

        cat = new CategoryModel
        {
            CategoryName = "Благодарность",
            CategoryDescription = "Ваша благодарность за предоставленный товар"
        };
        await categoryData.CreateCategory(cat);

        cat = new CategoryModel
        {
            CategoryName = "Другое",
            CategoryDescription = "Если нет подходящих категорий"
        };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel stat = new StatusModel
        {
            StatusName = "Завершено",
            StatusDescription = "Мы приняли все возможные меры для реализации вашего предложения"
        };
        await statusData.CreateStatus(stat);

        stat = new StatusModel
        {
            StatusName = "На рассмотрении",
            StatusDescription = "Пытаемся разобраться в ситуации"
        };
        await statusData.CreateStatus(stat);

        stat = new StatusModel
        {
            StatusName = "В производстве",
            StatusDescription = "пытаемся реализовать ваше предложение"
        };
        await statusData.CreateStatus(stat);

        stat = new StatusModel
        {
            StatusName = "Отклонено",
            StatusDescription = "Мы не можем реализовать ваше предложение"
        };
        await statusData.CreateStatus(stat);

        statusesCreated = true;
    }
}
